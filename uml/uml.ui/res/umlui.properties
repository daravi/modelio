NoBase = <no base>
NoName = <no name>
NoType = <no type>
From = from
IsA = Is a

SyncCall = Synchronous call
ASyncCall = Asynchronous call
ASyncSignal = Asynchronous signal
DestroyMessage = Destroy message
CreateMessage = Create message
ReturnMessage = Return message


BpmnTasksContainer.Single        = {0} task
BpmnTasksContainer.Multi         = {0} tasks
BpmnRolesContainer.Single        = {0} role
BpmnRolesContainer.Multi         = {0} roles
BpmnDataObjectsContainer.Single  = {0} data
BpmnDataObjectsContainer.Multi   = {0} data
BpmnEventsContainer.Single       = {0} event
BpmnEventsContainer.Multi        = {0} events
BpmnGatewaysContainer.Single     = {0} gateway
BpmnGatewaysContainer.Multi      = {0} gateways
BpmnMessageFlowsContainer.Single = {0} message
BpmnMessageFlowsContainer.Multi  = {0} messages


$R1000.description = A Model Element cannot abstract itself.
$R1000.message     = An abstraction must not be defined from the ''{2}'' {3} to itself.

$R1010.description = The top Partitions of an Activity must not have a Super-Partition.
$R1010.message     = The ''{0}'' Partition is a top Partition but has Super-Partitions.

$R1020.description = The source and the target of a Flow must be contained in the same StructuredActivityNode.
$R1020.message     = The source (''{0}'') and the target (''{1}'') of ''{2}'' are not contained in the same StructuredActivityNode.

$R1030.description = The source and the target of a Flow must be owned by the same Activity.
$R1030.message     = The source (''{0}'') and the target (''{1}'') of ''{2}'' are not owned by the same Activity.

$R1040.description = An Activity Parameter Node must be represented by a Behavior Parameter owned by the same Activity.
$R1040.message     = The ''{0}'' Activity Parameter Node is not represented by a Behavior Parameter owned by the same Activity.

$R1050.description = An Activity Parameter Node cannot have both incoming and outgoing edges.
$R1050.message     = The ''{0}'' Activity Parameter Node has both incoming and outgoing edges.

$R1060.description = Activity Parameter Nodes with no incoming flow and one or more outgoing flow must have a Behavior Parameter with "In" or "In/Out" parameter passing mode.
$R1060.message     = The ''{0}'' Activity Parameter Node has outgoing flows but its Behavior Parameter has an "Out" parameter passing mode.

$R1070.description = Activity Parameter Nodes with no outgoing flow and one or more incoming flow must have a Behavior Parameter with "Out" or "In/Out" parameter passing mode.
$R1070.message     = The ''{0}'' Activity Parameter Node has incoming flows but its Behavior Parameter has an "In" parameter passing mode.

$R1080.description = All Partitions of the same nesting level must represent Parts of the same Classifier.
$R1080.message     = The Partition or Activity ''{0}'' has Partitions which represent Parts from different Classifiers.

$R1090.description = If a Sub-Partition is non-external and represents a Classifier then the represented Classifier must be nested in the Classifier represented by its Super-Partition or be the extremity of a Composition with the latter.
$R1090.message     = The Classifier ''{2}'', represented by the Sub-Partition ''{1}'' is not contained (via nesting or composition) in the Classifier represented by the Super-Partition ''{0}''.

$R1100.description = If a Sub-Partition represents a Part nested in a Classifier then its Super-Partition must represent the Classifier or an instance of the latter.
$R1100.message     = The owner ''{0}'' of the Part ''{1}'' represented by the Partition ''{2}'' is not referenced by the Super-Partition ''{3}''.

$R1110.description = There must be one to one correspondence between: (A) the Pins of a Call Behavior Action, and (B) the In, Out, InOut or Return Behavior Parameters of the called Behaviour.
$R1110.message     = There is no correct matching between the Pins of ''{0}'' and the In, Out, InOut or Return Parameters of ''{1}''.

$R1130.description = The type and the maximum cardinality of a Call Action''s Pin must match the type and max multiplicity of the represented Parameter.
$R1130.message     = The type or the maximum cardinality of ''{0}'' does not match the type and maximum multiplicity of ''{1}''.

$R1140.description = There must be one to one correspondence between: (A) the Pins of a Call Operation Action, and (B) the In, Inout, Out and Return parameters of the called Operation.
$R1140.message     = There is no correct matching between the Pins of ''{0}'' and the parameters of ''{1}''

$R1150.description = The Call Operation Action or Send Signal Action has more than one target Pin.
$R1150.message     = The Call Operation Action or Send Signal Action ''{0}'' has more than one input Pin with its ''Self''' value at true.

$R1160.description = A target Pin can only be owned by Call Operation Actions and Send Signal Actions
$R1160.message     = The Pin ''{0}'' is a target Pin (its ''Self''' value is set to true) and is not owned by a Call Operation Actions or a Send Signal Action.

$R1170.description = The type of the target Pin must be the same as the type that owns the Operation.
$R1170.message     = The Call Operation Action ''{0}'' has target Pins not typed by the called operation owner .

$R1180.description = Control Flows may not have Object Nodes at either end, except for Object Nodes with control type.
$R1180.message     = The ''{0}'' Control Flow has as its source or target an Object Node with ''Control type'' false.

$R1190.description = The Decision-Merge Node is used both as a Decision node and as a Merge node at the same time.
$R1190.message     = The ''{0}'' Decision-Merge Node has more than one incoming edge and more than one outgoing edge.

$R1200.description = The edges coming into and out of a Decision Merge Node must be either all Object Flows or all Control Flows.
$R1200.message     = The ''{0}'' Decision-Merge node has both Object flows and Control Flows.

$R1230.description = Only Control Flows can have Initial Nodes as their source.
$R1230.message     = The ''{0}'' Initial Node has outgoing Object Flows.

$R1250.description = If a Fork/Join Node has an Object Flow in its incoming edges, it must have an Object Flow in its outgoing edges and vice versa. The same applies for Control Flows.
$R1250.message     = There is an incoherence for the flows of the Fork/Join Node ''{0}''

$R1280.description = Object Flows may not have Actions at both end.
$R1280.message     = The ''{0}'' Object Flow has Actions as its source and target.

$R1290.description = Object Nodes connected by an Object Flow, with optionally intervening control nodes, must have compatible types. In particular, the downstream Object Node type must be the same or a super type of the upstream Object Node type.
$R1290.message     = The Object Flow ''{0}'' connect two Object Nodes and the downstream Object Node type is not the same nor a super type of the upstream Object Node type.

$R1300.description = Object Nodes connected by an Object Flow, with optionally intervening control nodes, must have the same upper bounds.
$R1300.message     = The Object Flow ''{0}'' connect two Object Nodes which have different upper bound values.

$R1310.description = An edge with constant weight may not target an Object Node, or lead to an Object Node downstream with no intervening actions and with an upper bound less than the weight.
$R1310.message     = The edge ''{0}'' has a constant weight higher than the upper bound of an Object Node it targets or leads to.

$R1320.description = An Object Flow must not be simultaneously multi-cast and multi-receive.
$R1320.message     = The ''{0}'' Object Flow is both multi-cast and multi-receive.

$R1350.description = If an Object Node has a ''Selection behavior'', then the ''Ordering'' of the Object Node is ordered and vice versa.
$R1350.message     = The ''{0}'' Object Node has a ''Selection behavior'' but is not ordered, or is ordered but does not have a selection behavior.

$R1360.description = Input Pins may have outgoing edges only when both the following conditions are met: (1) they are on Actions that are Structured Nodes, and (2) these edges must target a Node contained by the Structured Node.
$R1360.message     = There is an edge coming from an Input Pin ''{0}'' and either the Input Pin is not on a Structured Activity Node, or the target ''{1}'' of the flow is not in the same Structured Activity Node.

$R1370.description = Output Pins may have incoming edges only when both the following conditions are met: (1) they are on Actions that are Structured Nodes, and (2) these edges must come from a node contained by the Structured Node.
$R1370.message     = There is an edge targeting an Output Pin ''{1}'' and either the Output Pin is not on a Structured Activity Node, or the source ''{0}'' of the flow is not in the same Structured Activity Node.

$R1380.description = There must be one to one correspondence between: (A) the Pins of a Send Signal Action, and (B) the attributes of the sent Signal.
$R1380.message     = There is no correct matching between the Pins belonging to ''{0}'' and the attributes belonging to ''{1}''.

$R1390.description = The max cardinality of an argument Pin must be the same as for the represented Attribute.
$R1390.message     = The maximum cardinality of ''{0}'' does not match the type and maximum multiplicity of ''{1}''.

$R1400.description = An Activity Parameter Node can only belong to an Activity.
$R1400.message     = The ''{0}'' Activity Parameter Node belongs to an Activity Partition, a Structured Activity Node or a Conditional Clause.

$R1410.description = Only one Association End of an Association can be aggregate or composite.
$R1410.message     = The Association ''{0}'' has more than one Association End that is aggregate or composite.

$R1420.description = Actors and UseCases can only have binary Associations.
$R1420.message     = The Actor or UseCase ''{0}'' has an n-ary Association.

$R1430.description = Multiplicities of an AssociationEnd must be consistent: MultiplicityMin cannot be '*' and MultiplicityMin must be inferior to MultiplicityMax.
$R1430.message     = The AssociationEnd owned by ''{1}'' has inconsistent Multiplicity values.

$R1450.description = If an association is a composition, then the opposite maximum multiplicity must be 1.
$R1450.message     = An AssociationEnd owned by ''{1}'' is a composition but its opposite end's maximum multiplicity is not 1.

$R1460.description = A public association oriented from a public Classifier cannot be linked to a private or protected Classifier.
$R1460.message     = The public Classifier ''{0}'' has an association oriented toward a private or protected Classifier: ''{1}''.

$R1470.description = The name of an AssociationEnd's qualifiers must be unique.
$R1470.message     = An AssociationEnd contained by ''{1}'' has one or more qualifiers with the same name: {2}.

$R1480.description = An Attribute must be typed by a primitive element.
$R1480.message     = The ''{0}'' attribute cannot be typed by the ''{1}'' {2}, because the latter is not primitive.

$R1490.description = In an instance, the type of an instantiated attribute must be in the instantiated class or in its parent classes.
$R1490.message     = The attribute link ''{0}'' instantiate the attribute ''{1}'', which is not in the instantiated class ''{2}'' nor in its super classes.

$R1500.description = In an instance, the name of an instantiated attribute must be the same as the corresponding attribute.
$R1500.message     = The instantiated attribute ''{0}'' does not have the same name as the attribute ''{1}''.

$R1520.description = The name of a BindableInstance must be unique in it Classifier.
$R1520.message     = There are several BindableInstances called ''{1}'' in the Classifier ''{0}''.

$R1530.description = An association or a port should have a name.
$R1530.message     = An element of metaclass ''{0}'' should have a name.

$R1540.description = A BindableInstance's RepresentedFeature must not refer itself, directly or indirectly.
$R1540.message     = The BindableInstance ''{0}'' refers to itself, directly or indirectly.

$R1550.description = If a BinbdableInstance has a type and has a represented feature, the type of the instance must be compatible with the type of this feature.
$R1550.message     = The type of the BindableInstance ''{0}'' is not compatible with the type: {1}.

$R1560.description = Sub classes of an active class must be active.
$R1560.message     = The active class ''{0}'' has a sub class that is not active: ''{1}''.

$R1580.description = Attributes, Associations and Operations cannot simultaneously be abstract and class.
$R1580.message     = The ''{0}'' {1} cannot be both abstract and class.

$R1590.description = Primitive GeneralClass cannot have associations.
$R1590.message     = The primitive class ''{0}'' has an association.

$R1600.description = A primitive class cannot have collaborations.
$R1600.message     = The class ''{0}'' has one or more collaborations.

$R1610.description = A primitive class cannot have state machines.
$R1610.message     = The class ''{0}'' is primitive and has one or more state machines.

$R1620.description = A non-abstract Classifier cannot have abstract methods.
$R1620.message     = The Classifier ''{0}'' is not abstract but it contains an abstract method: ''{1}''.

$R1640.description = A maximum of one ElementImport must exist between a NameSpace and another NameSpace or between an Operation and a NameSpace.
$R1640.message     = The {1} ''{0}'' has more than one ElementImport towards ''{2}''.

$R1650.description = An Enumeration cannot be abstract.
$R1650.message     = The enumeration ''{0}'' is abstract.

$R1660.description = An enumeration is always primitive.
$R1660.message     = The enumeration ''{0}'' is not primitive.

$R1670.description = EnumlerationLitteral defined in an Enumeration must have an unique name.
$R1670.message     = The enumeration ''{0}'' contains at least two EnumerationLitterals with the same name: {1}.

$R1680.description = For a Call-type Event, the 'Called operation' field must be defined, whereas the 'Instanciated signal' must be empty.
$R1680.message     = The Event ''{0}'' is a Call-type Event, but either its ''called operation'' field is not defined, or its ''Instanciated signal'' field is not empty.

$R1690.description = The 'Expression' field for a Change-type Event must be defined, whereas the 'Called operation' and 'Instanciated signal' fields must be empty.
$R1690.message     = The Event ''{0}'' is a Change-type Event, but either its ''Expression'' field is not defined, or its ''Called operation'' or ''Instanciated signal'' fields are not empty.

$R1700.description = The 'Instantiated signal' field for a signal-type Event must be defined, whereas the 'Called operation' and 'Expression' fields must be empty.
$R1700.message     = The Event ''{0}'' is a signal-type Event, but either its ''Instantiated signal'' field is not defined, or its ''Called operation'' or ''Expression'' fields are not empty.

$R1710.description = The 'Expression' field for a Time-type Event must be defined, whereas the 'Called operation' and 'Instanciated signal' fields must be empty.
$R1710.message     = The Event ''{0}'' is a Time-type Event, but either its ''Expression'' field is not defined, or its ''Called operation'' or ''Instanciated signal'' fields are not empty.

$R1720.description = An abstract NameSpace should only inherit from an abstract NameSpace.
$R1720.message     = The namespace ''{0}'' inherits from the non abstract namespace ''{1}''.

$R1730.description = A generalization must be created between two model elements of the same type, except in the case of a signal, which can specialize a Signal or a Class.
$R1730.message     = There is a generalization between ''{1}'' and ''{2}'' which are not compatible.

$R1740.description = An InformationFlow should convey information.
$R1740.message     = The InformationFlow does not convey any information.

$R1750.description = Repetition of names is forbidden for all AttributeLinks.
$R1750.message     = The instance ''{0}'' contains at least two attribute links with the same name: {1}.

$R1760.description = There cannot be inconsistency in the multiplicities of an Instance
$R1760.message     = The MultiplicityMin ({1}) of the ''{0}'' Instance is greater than its MultiplicityMax ({2}).

$R1780.description = The name of an Instance must be unique in its NameSpace.
$R1780.message     = There are several instances called ''{1}'' in the namespace ''{0}''.

$R1790.description = An instance must have a name, or the instantiation association must be defined.
$R1790.message     = An instance has no name, and its instantiation association is not defined.

$R1800.description = If an Operator is of type opt, loop, break or neg, there cannot be more than one Operand.
$R1800.message     = The CombinedFragment ''{0}'' has an Operator of type  opt, loop, break or neg, but has more than one Operand.

$R1810.description = An actual Gate on an InteractionUse must reference a formal Gate contained by the referenced Interaction.
$R1810.message     = The actual Gate ''{0}'' references a formal Gate which is not contained by the referenced Interaction.

$R1820.description = A gate cannot cover a lifeline.
$R1820.message     = The gate ''{0}'' covers a lifeline.

$R1830.description = A PartDecomposition cannot receive 'create' or 'destroy' messages.
$R1830.message     = The PartDecomposition ''{0}'' receives ''create'' or ''destroy'' messages.

$R1860.description = In an Interface, the visibility of all Features must be public.
$R1860.message     = The ''{0}'' Interface has at least one non public feature: ''{1}''.

$R1870.description = An Interface cannot be implemented twice by the same class or the same component.
$R1870.message     = The NameSpace ''{1}'' implements the ''{0}'' Interface more than one time.

$R1910.description = A Link that instantiates an association must be coherent with this association.
$R1910.message     = The link ''{0}'' is not coherent with the association ''{1}'' it instantiates. The linked instances must instantiate the Classifier linked by the association, the link and the association should have the same name, the same roles, as well as the same properties.

$R1950.description = Messages of type 'reply' cannot invoke an Operation.
$R1950.message     = The message ''{0}'' invokes an Operation but is of ''reply'' kind.

$R1960.description = A message must have the same name as the invoked Operation.
$R1960.message     = The Message ''{0}'' does not have the same name as the Operation ''{1}'' it invokes.

$R1970.description = A TemplateParameterSubstitution must reference a TemplateParameter.
$R1970.message     = A template parameter substitution belonging to the ''{0}'' element does not reference a template parameter.

$R1980.description = The names of a Classifier's Attributes and AssociationEnds must be unique.
$R1980.message     = The Classifier ''{0}'' has at least two Attributes or two AssociationEnds with the same name: ''{1}''.

$R1990.description = The name of a Classifier's inherited Attributes and Roles must be unique.
$R1990.message     = The Classifier ''{0}'' has a duplicated name from its inherited Attributes and Roles : {1}

$R2050.description = Some elements must have a name.
$R2050.message     = An element of metaclass ''{0}'' must have a name.

$R2060.description = The name of a NameSpace must be unique in its NameSpace.
$R2060.message     = There are several namespaces with the same name in the namespace ''{0}''.

$R2170.description = The name of a Behavior must be unique in its NameSpace.
$R2170.message     = There are several Behavior called ''{1}'' in the NameSpace ''{0}''.

$R2180.description = No cycles can exist in a NameSpace inheritance graph.
$R2180.message     = The namespace ''{0}'' is part of an inheritance cycle.

$R2190.description = A maximum of one generalization may exist between two namespaces.
$R2190.message     = The NameSpace ''{0}'' specializes the NameSpace ''{1}'' two or more times.

$R2200.description = A NameSpace cannot both derive and import another NameSpace.
$R2200.message     = The NameSpace ''{0}'' both derives and imports another NameSpace.

$R2210.description = A leaf NameSpace cannot be derived.
$R2210.message     = The namespace ''{0}'' is a leaf namespace and is derived.

$R2220.description = A leaf NameSpace cannot be abstract.
$R2220.message     = The namespace ''{0}'' is a leaf namespace and is abstract.

$R2230.description = A root NameSpace cannot inherit from any other NameSpace.
$R2230.message     = The namespace ''{0}'' is a root namespace but inherits from another namespace.

$R2250.description = All operations in a Classifier must have a different signature from inherited public and protected operations. Except for constructor, destructor and redefined operations.
$R2250.message     = The Classifier ''{0}'' has an operation ''{1}'' masking the operation ''{2}'' inherited from the classifier ''{3}''.

$R2260.description = Each Operation in a Classifier must have a different signature.
$R2260.message     = The Classifier ''{1}'' has several operations with the same signature.

$R2270.description = All an Operation's Collaborations must have a different name.
$R2270.message     = The operation ''{0}'' has at least two collaborations with the same name: {1}

$R2330.description = All an Operation's Parameters must have a different name.
$R2330.message     = The operation ''{0}'' has at least two parameters with the same name: {1}

$R2340.description = A redefined Operation must belong to a parent or an implemented Interface of the owner of the Operation.
$R2340.message     = The Operation ''{0}'' redefines an operation which does not belong to any parent or any implemented Interface.

$R2350.description = A private Operation cannot be redefined.
$R2350.message     = The Operation ''{0}'' is private and is redefined.

$R2360.description = The visibility of an Operation cannot be greater than that of the Operations it redefines.
$R2360.message     = The visibility of the Operation ''{0}'' is greater than the operation it redefines.

$R2370.description = A class (static) Operation cannot be redefined.
$R2370.message     = The Operation ''{0}'' is static and is redefined.

$R2380.description = An abstract Operation must not redefine a concrete Operation.
$R2380.message     = The abstract Operation ''{0}'' redefines the Operation ''{1}'' which is a concrete Operation.

$R2390.description = A constructor cannot have return parameters.
$R2390.message     = The constructor ''{0}'' has a return parameter.

$R2400.description = A destructor cannot have any kind of parameters.
$R2400.message     = The destructor ''{0}'' has a parameter.

$R2410.description = An operation cannot own both 'create' and 'destroy' stereotypes.
$R2410.message     = The operation ''{0}'' own both 'create' and 'destroy' stereotypes.

$R2420.description = An Operation must have the same signature as the Operation it redefines.
$R2420.message     = The Operation ''{0}'' redefines an Operation but the signatures are not the same.

$R2430.description = All an Operation's StateMachines must have a different name.
$R2430.message     = The operation ''{0}'' has at least two state machines with the same name: {1}

$R2440.description = An Operation cannot belong to an Enumeration.
$R2440.message     = The Enumeration ''{0}'' contains an Operation.

$R2450.description = A package cannot have inheritance links.
$R2450.message     = The package ''{0}'' has inheritance links.

$R2470.description = A maximum of one PackageImport link may exist between a NameSpace and a Package.
$R2470.message     = The NameSpace ''{0}'' has more than one PackageImport toward the Package ''{1}''.

$R2500.description = An 'out' Parameter cannot have a default value.
$R2500.message     = The 'out' parameter ''{0}'' had a default value.

$R2510.description = There cannot be any direct link between two Class Ports.
$R2510.message     = There is a link between a port of the class ''{0}'' and a port of the class ''{1}''.

$R2520.description = If a Port runs a delegation towards an internal part, it must provide at least one Interface.
$R2520.message     = The port ''{0}'' runs a delegation towards an internal part, but does not provide any Interface.

$R2530.description = If a Port receives a delegation from an internal part, it must provide at least one Interface.
$R2530.message     = The port ''{0}'' receives a delegation from an internal part but does not provide any Interface.

$R2540.description = The Interfaces provided by a port must be implemented by the Class that types the Port.
$R2540.message     = The ''{0}'' port provides {2,choice,0#no interface|1#one interface|2#{2} interfaces} not implemented by ''{1}'' that types the port.

$R2550.description = If a Port is a behavior port, its provided Interfaces must be implemented by the Class it belongs to.
$R2550_.message     = The ''{0}'' port provides Interfaces that are not implemented by the Class it belongs to.
$R2550.message     = The ''{0}'' port provides {2,choice,0#no interface|1#one interface|2#{2} interfaces} not implemented by ''{1}'' it belongs to.

$R2560.description = A behavior Port must provide at least one Interface.
$R2560.message     = The ''{0}'' port is a behavior port but does not provide any Interface.

$R2570.description = If a Port is a behavior port, the type of the port must be either the Class it belongs to or undefined.
$R2570.message     = The ''{0}'' port is a behavior port but its type is: ''{1}''.

$R2580.description = A region cannot contain more than one deep history state.
$R2580.message     = The region ''{0}'' contains more than one deep history state.

$R2590.description = A region cannot contains more than one initial state.
$R2590.message     = The region ''{0}'' contains more than one initial state.

$R2600.description = A state machine or a state cannot have two states with the same name.
$R2600.message     = The state machine or state ''{0}'' has at least two states with the same name.

$R2610.description = Only submachine states can have connection point references.
$R2610.message     = The state ''{0}'' is not a submachine state but has connection point references.

$R2620.description = Submachine states should not have entry or exit pseudo states defined.
$R2620.message     = The submachine state ''{0}'' has an entry or exit pseudo state defined.

$R2630.description = A region cannot contain more than one shallow history state.
$R2630.message     = The region ''{0}'' contains more than one shallow history state.

$R2640.description = The context of a state machine cannot be an Interface.
$R2640.message     = The context of the state machine ''{0}'' is an Interface.

$R2650.description = The context of a protocol state machine must be a Classifier.
$R2650.message     = The context of the protocol state machine ''{0}'' is not a Classifier.

$R2660.description = A state in a protocol state machine cannot have entry, exit, or do activity actions.
$R2660.message     = The state ''{0}'' is in a protocol state machine and has entry, exit, or do activity actions.

$R2670.description = A protocol state machine cannot have history vertexes.
$R2670.message     = The protocol state machine ''{0}'' have history vertexes.

$R2690.description = An element cannot have a TemplateBinding towards itself.
$R2690.message     = The element ''{0}'' has a TemplateBinding towards itself.

$R2700.description = A TemplateBinding can only substitute each TemplateParameter of the instantiated element once.
$R2700.message     = The TemplateBinding ''{0}'' substitutes the TemplateParameter ''{1}'' more than one time.

$R2720.description = A TemplateBinding must be created between two elements of the same type or between a Class and a DataType.
$R2720.message     = The TemplateBinding ''{0}'' is not between two elements of the same type or between a Class and a DataType.

$R2730.description = A TemplateBinding must substitute all the TemplateParameters of the instanciated template element, and the TemplateParameterSubstitution must be defines in the same order as the TemplateParameters.
$R2730.message     = The TemplateBinding ''{0}'' does not substitute all the TemplateParameters of the instanciated template element, or it does not define its TemplateParameterSubstitution in the same order as the TemplateParameters.

$R2740.description = In a TemplateBinding, the TemplateParameterSubstitution must belong to the instantiated template element.
$R2740.message     = The TemplateBinding ''{0}'' contains TemplateParameterSubstitution that do not belong to the instantiated template element.

$R2750.description = A transition from a fork or join pseudo state should not have guards or triggers.
$R2750.message     = The transition from ''{1}'' to ''{2}'' has a guard or a trigger.

$R2760.description = A fork segment must always target a state.
$R2760.message     = The fork segment ''{0}'' does not target a state.

$R2770.description = A join segment must always originate from a state.
$R2770.message     = The join segment ''{0}'' does not originate from a state.

$R2780.description = Transitions outgoing pseudostates may not have a trigger (except for those coming out of the initial pseudostate).
$R2780.message     = The transition from ''{1}'' to the {3} ''{2}'' has a trigger.

$R2790.description = A transition from one region to another in the same immediate enclosing composite state is not allowed.
$R2790.message     = The state ''{3}'' has a transition from its region ''{1}'' to its region ''{2}''.

$R2800.description = An initial vertex can have at most one outgoing transition.
$R2800.message     = The initial vertex ''{0}'' has more than one outgoing transition.

$R2810.description = History vertices can have at most one outgoing transition.
$R2810.message     = The history vertex ''{0}'' has more than one outgoing transition.

$R2820.description = The target of a transition cannot be an initial vertex.
$R2820.message     = A transition has a target ''{1}'' that is an initial vertex.

$R2830.description = The source of a transition cannot be a final vertex.
$R2830.message     = A transition has a source ''{1}'' that is a final vertex.

$R2840.description = A transition should have only one of Processed, Effects, or BehaviorEffet defined.
$R2840.message     = A transition from ''{1}'' to ''{2}'' has more than one of Processed, Effects, or BehaviorEffet defined.

$R2860.description = A maximum of one extension/inclusion relationship may exist between two Use Cases.
$R2860.message     = The Use Case ''{0}'' has more than one extension/inclusion relationship towards another Use Case.

$R2870.description = There must be no cycle in Use Cases extension relationship graph.
$R2870.message     = The Use Case ''{0}'' is part of an extension relationship cycle.

$R2880.description = There must be no cycle in Use Cases inclusion relationship graph.
$R2880.message     = The Use Case ''{0}'' is part of an inclusion relationship cycle.

$R2890.description = A communication link cannot be reflexive.
$R2890.message     = ''{1}'' has a reflexive communication link.

$R2900.description = An extension relationship must reference at least one Extension Point.
$R2900.message     = An extension relationship from ''{0}'' to ''{1}'' does not reference an Extension Point.

$R2910.description = An extension relationship can only reference the target's Extension Points.
$R2910.message     = An extension relationship from ''{0}'' to ''{1}'' references Extension Points that are not from the target''s Extension Points.

$R2920.description = Extension Points can only be referenced by an extension relationship.
$R2920.message     = A relationship from ''{0}'' to ''{1}'' references Extension Points but is not an extension relationship.

$R2930.description = Message and CommunicationMessage cannot have both Signal and Operation properties defined.
$R2930.message     = The {1} ''{0}'' have both Signal and Operation properties defined.

$R2940.description = All transitions incoming a join vertex must originate in different regions of an orthogonal state.
$R2940.message     = The join vertex ''{0}'' has transitions that originate in the same region of an orthogonal state or in different states. 

$R2950.description = All transitions outgoing a fork vertex must target states in different regions of an orthogonal state.
$R2950.message     = The fork vertex ''{0}'' has transitions that targets the same region of an orthogonal state or different states.

$AuditCategory.Activity.label = Activity
$AuditCategory.Others.label   = Others
$AuditCategory.Sequence.label = Sequence
$AuditCategory.State.label    = State
$AuditCategory.Static.label   = Static
$AuditCategory.UseCase.label  = Use Case

BpmnEventDefinitionType.label = Type: {0}
BpmnEventDefinitionType.indent = \u00A0\u00A0\u00A0
